plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.freefair.lombok" version "6.3.0"
    id "java"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    //accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "spoornweaponattributes-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi "me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}"

    // Expressions
    implementation "net.objecthunter:exp4j:${exp4j_version}"
    // Pull external dependency into Jar, as Cloth Config is doing: https://github.com/shedaniel/cloth-config/blob/bea4a18fccf8fff2e5ea0952be82b8c40e39714f/forge/build.gradle#L42
    forgeDependencies(shadowCommon("net.objecthunter:exp4j:${exp4j_version}"))
}

repositories {
    // Cloth Config
    maven { url "https://maven.shedaniel.me/" }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    relocate "net.objecthunter.exp4j", "${rootProject.maven_group}.spoornweaponattributes.shadowed.net.objecthunter.exp4j"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
